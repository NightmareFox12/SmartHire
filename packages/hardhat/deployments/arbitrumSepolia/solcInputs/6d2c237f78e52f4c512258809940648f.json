{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TaskContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\"; //Contract AccessControl by OpenZeppelin\r\n\r\ncontract TaskContract is AccessControl {\r\n    //Roles for AccessControl\r\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\r\n    bytes32 public constant USER_ROLE = keccak256(\"USER_ROLE\");\r\n\r\n    uint256 public taskID = 0;\r\n    uint256 auditorID = 0;\r\n    uint256 userID = 0;\r\n    uint256 taskCompletedID = 0;\r\n    address public admin;\r\n\r\n    struct Task {\r\n        uint256 taskID;\r\n        string name;\r\n        string description;\r\n        string rules;\r\n        uint256 reward;\r\n        address payable responsible;\r\n        bool completed;\r\n    }\r\n\r\n    struct Auditor {\r\n        uint256 auditorID;\r\n        address auditorAddress;\r\n        bool block;\r\n    }\r\n\r\n    struct TaskCompleted {\r\n        uint256 taskCompletedID;\r\n        uint256 taskID;\r\n        string proof;\r\n        address verifier;\r\n        bool verified;\r\n        bool release;\r\n    }\r\n\r\n    //mappings\r\n    mapping(uint256 => Task) public tasks;\r\n    mapping(uint256 => Auditor) public auditors;\r\n    mapping(uint256 => address) public users;\r\n    mapping(uint256 => TaskCompleted) tasksCompleted;\r\n\r\n    //events\r\n    event AuditorAdded(address indexed auditor);\r\n    event TaskAdded(uint256 indexed taskID, string name);\r\n    event UserAdded(address indexed userAddress);\r\n\r\n    //constructor\r\n    constructor(address _admin) {\r\n        admin = _admin;\r\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin); // Grant the default admin role to the user specified by the AccessControl\r\n    }\r\n\r\n    //Functions\r\n\r\n    /**\r\n     * Adds a new user to the system.\r\n     * Checks various conditions including whether the address is valid,\r\n     * if the sender has the required role, and if the address is not already assigned.\r\n     * If all conditions are met, grants the user role to the address and emits an event.\r\n     * @param _addressUser - Address of the user to be added.\r\n     */\r\n\r\n    function addUser(address _addressUser) public {\r\n        require(\r\n            _addressUser != address(0),\r\n            \"User address cannot be zero address\"\r\n        );\r\n        require(admin != _addressUser, \"Admin cannot be user\");\r\n        // Check if the sender has either the default admin role or the auditor role using the AccessControl library\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\r\n                hasRole(AUDITOR_ROLE, msg.sender),\r\n            \"Caller is not an admin or auditor\"\r\n        );\r\n\r\n        require(!getUserForAddress(_addressUser), \"User already exists\");\r\n        require(!getAuditorForAddress(_addressUser), \"Adress is auditor\");\r\n\r\n        _grantRole(USER_ROLE, _addressUser);\r\n        users[userID] = _addressUser;\r\n        userID++;\r\n        emit UserAdded(_addressUser);\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing all user addresses.\r\n     * Creates a new array with the size equal to the current number of users (userID).\r\n     * Iterates through the users mapping to populate the array with user addresses.\r\n     * @return address[] memory - An array of user addresses.\r\n     */\r\n\r\n    /**\r\n     * Retrieves a list of all user addresses.\r\n     * Creates a new array with the length equal to the current number of users (userID).\r\n     * Iterates over the users mapping to populate the array with user addresses.\r\n     * Returns the array of user addresses.\r\n     * @return address[] memory - An array containing all user addresses.\r\n     */\r\n\r\n    function getAllUsers() public view returns (address[] memory) {\r\n        address[] memory userList = new address[](userID);\r\n        for (uint256 i = 0; i < userID; i++) {\r\n            userList[i] = users[i];\r\n        }\r\n        return userList;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given address is associated with any user.\r\n     * Validates that the provided address is not the zero address.\r\n     * Iterates through the user mapping to see if the address matches any existing user addresses.\r\n     * Returns true if a match is found; otherwise, returns false.\r\n     * @param _addressUser - The address to be checked.\r\n     * @return bool - True if the address is a user, false otherwise.\r\n     */\r\n    function getUserForAddress(address _addressUser)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _addressUser != address(0),\r\n            \"User address cannot be zero address\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < userID; i++) {\r\n            if (users[i] == _addressUser) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new task with the given name, description, and rules.\r\n     * Ensures the provided name, description, and rules are not empty and that a reward is provided.\r\n     * Stores the task in the tasks mapping with a unique taskID and initializes task properties.\r\n     * Emits a TaskAdded event to signal that a new task has been created.\r\n     * @param _name - The name of the task.\r\n     * @param _description - A brief description of the task.\r\n     * @param _rules - The rules and guidelines for the task.\r\n     */\r\n    function createTask(\r\n        string memory _name,\r\n        string memory _description,\r\n        string memory _rules\r\n    ) public payable onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(bytes(_name).length > 0, \"Task name cannot be empty\");\r\n        require(\r\n            bytes(_description).length > 0,\r\n            \"Task description cannot be empty\"\r\n        );\r\n        require(bytes(_rules).length > 0, \"Task rules cannot be empty\");\r\n        require(msg.value > 0, \"A reward must be provided\");\r\n\r\n        tasks[taskID] = Task(\r\n            taskID,\r\n            _name,\r\n            _description,\r\n            _rules,\r\n            msg.value,\r\n            payable(address(0)),\r\n            false\r\n        );\r\n\r\n        taskID++;\r\n        emit TaskAdded(taskID, _name);\r\n    }\r\n\r\n    /**\r\n     * Creates a new task with the specified name, description, rules, and responsible address.\r\n     * Ensures the provided name, description, and rules are not empty.\r\n     * Validates that a reward is provided and that the responsible address is not an admin or auditor.\r\n     * Assigns the task to the responsible address, granting the user role if not already assigned.\r\n     * Emits events to signal the addition of the user (if new) and the task.\r\n     * @param _name - The name of the task.\r\n     * @param _description - A brief description of the task.\r\n     * @param _rules - The rules and guidelines for the task.\r\n     * @param _responsible - The address responsible for the task.\r\n     */\r\n    function createTaskWithResponsible(\r\n        string memory _name,\r\n        string memory _description,\r\n        string memory _rules,\r\n        address _responsible\r\n    ) public payable onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(bytes(_name).length > 0, \"Task name cannot be empty\");\r\n        require(\r\n            bytes(_description).length > 0,\r\n            \"Task description cannot be empty\"\r\n        );\r\n        require(bytes(_rules).length > 0, \"Task rules cannot be empty\");\r\n\r\n        require(msg.value > 0, \"A reward must be provided\");\r\n        require(admin != _responsible, \"Address is admin\");\r\n        require(!getAuditorForAddress(_responsible), \"Adress is auditor\");\r\n\r\n        tasks[taskID] = Task(\r\n            taskID,\r\n            _name,\r\n            _description,\r\n            _rules,\r\n            msg.value,\r\n            payable(_responsible),\r\n            false\r\n        );\r\n\r\n        if (!getUserForAddress(_responsible)) {\r\n            _grantRole(USER_ROLE, _responsible);\r\n            users[userID] = _responsible;\r\n            userID++;\r\n            emit UserAdded(_responsible);\r\n        }\r\n\r\n        taskID++;\r\n        emit TaskAdded(taskID, _name);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the name and description of a task by its ID.\r\n     * Accesses the task from the tasks mapping using the provided task ID.\r\n     * Returns the task's name and description.\r\n     * @param _taskID - The ID of the task to retrieve.\r\n     * @return (string memory, string memory) - The name and description of the task.\r\n     */\r\n    function getTask(uint256 _taskID)\r\n        public\r\n        view\r\n        returns (string memory, string memory)\r\n    {\r\n        Task storage task = tasks[_taskID];\r\n        return (task.name, task.description);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of all tasks.\r\n     * Ensures the caller has either the default admin role or the auditor role.\r\n     * Creates a new array with the length equal to the number of tasks.\r\n     * Iterates over the tasks mapping to populate the array with task details.\r\n     * @return Task[] memory - An array containing all tasks.\r\n     */\r\n    function getAllTasks() public view returns (Task[] memory) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\r\n                hasRole(AUDITOR_ROLE, msg.sender),\r\n            \"Caller is not an admin or auditor\"\r\n        );\r\n        Task[] memory taskList = new Task[](taskID);\r\n        for (uint256 i = 0; i < taskID; i++) {\r\n            Task storage task = tasks[i];\r\n            taskList[i] = task;\r\n        }\r\n        return taskList;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all tasks assigned to the caller.\r\n     * Ensures the caller has the USER_ROLE and the sender address is not the zero address.\r\n     * Counts the number of tasks assigned to the caller.\r\n     * Creates an array to store these tasks.\r\n     * Iterates over the tasks mapping to populate the array with tasks assigned to the caller.\r\n     * @return Task[] memory - An array containing tasks assigned to the caller.\r\n     */\r\n    function getTasksByResponsible()\r\n        public\r\n        view\r\n        onlyRole(USER_ROLE)\r\n        returns (Task[] memory)\r\n    {\r\n        require(msg.sender != address(0), \"Sender address is required\");\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < taskID; i++)\r\n            if (tasks[i].responsible == msg.sender) count++;\r\n\r\n        Task[] memory result = new Task[](count);\r\n\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < taskID; i++) {\r\n            if (tasks[i].responsible == msg.sender) {\r\n                result[index] = tasks[i];\r\n                index++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of tasks that do not have an assigned responsible address.\r\n     * Iterates through the tasks mapping to count the number of tasks without a responsible address.\r\n     * Creates an array to store these tasks.\r\n     * Populates the array with tasks that have no responsible address.\r\n     * Returns the array of tasks without a responsible address.\r\n     * @return Task[] memory - An array containing tasks without a responsible address.\r\n     */\r\n    function getTasksWithoutResponsible() public view returns (Task[] memory) {\r\n        uint256 count = 0;\r\n        uint256 index = 0;\r\n\r\n        for (uint256 i = 0; i < taskID; i++) {\r\n            if (tasks[i].responsible == address(0)) count++;\r\n        }\r\n\r\n        Task[] memory tasksWithoutResponsible = new Task[](count);\r\n\r\n        for (uint256 i = 0; i < taskID; i++) {\r\n            if (tasks[i].responsible == address(0)) {\r\n                tasksWithoutResponsible[index] = tasks[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return tasksWithoutResponsible;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a completed task by its task ID.\r\n     * Iterates through the tasksCompleted mapping to find the task with the matching task ID.\r\n     * Returns the completed task if found, otherwise returns a default TaskCompleted object.\r\n     * @param _taskID - The ID of the task to retrieve.\r\n     * @return TaskCompleted memory - The completed task corresponding to the given task ID.\r\n     */\r\n    function getCompletedTask(uint256 _taskID)\r\n        public\r\n        view\r\n        returns (TaskCompleted memory)\r\n    {\r\n        for (uint256 i = 0; i < taskCompletedID; i++) {\r\n            if (tasksCompleted[i].taskID == _taskID) {\r\n                return tasksCompleted[i];\r\n            }\r\n        }\r\n        return TaskCompleted(taskCompletedID, 0, \"\", address(0), false, false);\r\n    }\r\n\r\n    /**\r\n     * Allows a user to accept a task by assigning themselves as the responsible party.\r\n     * Ensures that the sender is not the admin, the task exists, the task has no assigned responsible, and the sender is not an auditor.\r\n     * If the sender is not already a user, assigns the user role to the sender and adds them to the users list.\r\n     * Updates the task to mark the sender as the responsible party.\r\n     * @param _taskID - The ID of the task to be accepted.\r\n     */\r\n    function acceptTask(uint256 _taskID) public {\r\n        require(msg.sender != admin, \"Address is admin\");\r\n        require(tasks[_taskID].reward > 0, \"The task does not exist\");\r\n        require(\r\n            tasks[_taskID].responsible == address(0),\r\n            \"Task must have a responsible assigned\"\r\n        );\r\n        require(\r\n            !getAuditorForAddress(msg.sender),\r\n            \"The auditor cannot take on tasks\"\r\n        );\r\n\r\n        if (!getUserForAddress(msg.sender)) {\r\n            _grantRole(USER_ROLE, msg.sender);\r\n            users[userID] = msg.sender;\r\n            userID++;\r\n            emit UserAdded(msg.sender);\r\n        }\r\n        tasks[_taskID].responsible = payable(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Marks a task as completed by providing proof.\r\n     * Ensures the caller has the USER_ROLE and validates that the task exists and the proof is not empty.\r\n     * Checks if the task has already been completed; if not, it records the completion.\r\n     * @param _taskID - The ID of the task to mark as completed.\r\n     * @param _proof - The proof of task completion.\r\n     */\r\nfunction completedTask(uint256 _taskID, string memory _proof)\r\n    public\r\n    onlyRole(USER_ROLE)\r\n{\r\n    require(tasks[_taskID].reward > 0,\"The task does not exist\");\r\n    require(!tasks[_taskID].completed, \"Task has already been completed\");\r\n    require(bytes(_proof).length > 0, \"Proof cannot be empty\");\r\n\r\n    for (uint256 i = 0; i < taskCompletedID; i++) {\r\n        if (tasksCompleted[i].taskID == _taskID) require(tasksCompleted[i].release, \"The task is not released\");\r\n    }\r\n\r\n    tasksCompleted[taskCompletedID] = TaskCompleted(\r\n        taskCompletedID,\r\n        _taskID,\r\n        _proof,\r\n        address(0),\r\n        false,\r\n        false\r\n    );\r\n    taskCompletedID++;\r\n}\r\n\r\n\r\n    /**\r\n     * Verifies a completed task.\r\n     * Checks if the sender has either the default admin role or the auditor role.\r\n     * Ensures the proof is provided and the task exists.\r\n     * If verified, assigns the verifier and transfers the reward to the responsible.\r\n     * If not verified, releases the task for reassignment.\r\n     * @param _taskCompletedID - The ID of the completed task to verify.\r\n     * @param _verified - Boolean indicating whether the task is verified.\r\n     */\r\n    function verifiedTask(uint256 _taskCompletedID, bool _verified) public {\r\n        // Check if the sender has either the default admin role or the auditor role using the AccessControl library\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\r\n                hasRole(AUDITOR_ROLE, msg.sender),\r\n            \"Caller is not an admin or auditor\"\r\n        );\r\n\r\n        string memory _proof = tasksCompleted[_taskCompletedID].proof;\r\n        require(bytes(_proof).length > 0, \"Proof cannot be empty\");\r\n\r\n        uint256 _taskID = tasksCompleted[_taskCompletedID].taskID;\r\n\r\n        require(\r\n            bytes(tasks[_taskID].name).length > 0,\r\n            \"The task does not exist\"\r\n        );\r\n        require(\r\n            tasks[_taskID].responsible != payable(address(0)),\r\n            \"No responsible assigned\"\r\n        );\r\n        if (_verified) {\r\n            tasksCompleted[_taskCompletedID].verifier = msg.sender;\r\n            tasksCompleted[_taskCompletedID].verified = true;\r\n\r\n            uint256 _amount = tasks[_taskID].reward;\r\n            address _responsible = tasks[_taskID].responsible;\r\n            tasks[_taskID].completed = true;\r\n\r\n            (bool success, ) = payable(_responsible).call{value: _amount}(\"\");\r\n            require(success);\r\n        } else {\r\n            //releases the task so that it can be accepted by another user\r\n            tasksCompleted[_taskCompletedID].release = true; \r\n            tasksCompleted[_taskCompletedID].verifier = msg.sender;\r\n            tasksCompleted[_taskCompletedID].verified = false;\r\n\r\n            tasks[_taskID].responsible = payable(address(0)); \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new auditor to the system.\r\n     * Ensures the provided auditor address is valid and not already assigned as an admin, auditor, or user.\r\n     * Creates a new Auditor object and assigns the AUDITOR_ROLE to the given address.\r\n     * Increments the auditorID and emits an event to signal that a new auditor has been added.\r\n     * @param _auditorAddress - The address of the auditor to be added.\r\n     */\r\n    function addAuditor(address _auditorAddress)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _auditorAddress != address(0),\r\n            \"Auditor address cannot be zero address\"\r\n        );\r\n        require(admin != _auditorAddress, \"Admin cannot be auditor\");\r\n        require(\r\n            !getAuditorForAddress(_auditorAddress),\r\n            \"Auditor already exist\"\r\n        );\r\n        require(!getUserForAddress(_auditorAddress), \"User already exists\");\r\n\r\n        auditors[auditorID] = Auditor(auditorID, _auditorAddress, false);\r\n        _grantRole(AUDITOR_ROLE, _auditorAddress);\r\n        auditorID++;\r\n\r\n        emit AuditorAdded(_auditorAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of all auditors.\r\n     * Creates a new array with the length equal to the number of auditors (auditorID).\r\n     * Iterates over the auditors mapping to populate the array with auditor details.\r\n     * Returns the array of auditors.\r\n     * @return Auditor[] memory - An array containing all auditors.\r\n     */\r\n    function getAllAuditors() public view returns (Auditor[] memory) {\r\n        Auditor[] memory auditorList = new Auditor[](auditorID);\r\n        for (uint256 i = 0; i < auditorID; i++) {\r\n            Auditor storage auditor = auditors[i];\r\n            auditorList[i] = auditor;\r\n        }\r\n        return auditorList;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given address is associated with an auditor.\r\n     * Iterates through the auditors mapping to see if the address matches any existing auditor addresses.\r\n     * Returns true if a match is found; otherwise, returns false.\r\n     * @param _auditorAddress - The address to be checked.\r\n     * @return bool - True if the address is an auditor, false otherwise.\r\n     */\r\n    function getAuditorForAddress(address _auditorAddress)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i <= auditorID; i++) {\r\n            if (auditors[i].auditorAddress == _auditorAddress) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Blocks an auditor by setting their block status to true and revoking their auditor role.\r\n     * Ensures the auditor exists by checking if their address is not the zero address.\r\n     * Updates the auditor's block status and revokes their AUDITOR_ROLE.\r\n     * @param _auditorID - The ID of the auditor to be blocked.\r\n     */\r\n    function blockAuditor(uint256 _auditorID)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            auditors[_auditorID].auditorAddress != address(0),\r\n            \"Auditor does not exist\"\r\n        );\r\n        auditors[_auditorID].block = true;\r\n        _revokeRole(AUDITOR_ROLE, auditors[_auditorID].auditorAddress);\r\n    }\r\n\r\n    /**\r\n     * Unlocks an auditor by setting their block status to false and re-granting their auditor role.\r\n     * Ensures the auditor exists by checking if their address is not the zero address.\r\n     * Updates the auditor's block status and grants them the AUDITOR_ROLE again.\r\n     * @param _auditorID - The ID of the auditor to be unlocked.\r\n     */\r\n    function unlockAuditor(uint256 _auditorID)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            auditors[_auditorID].auditorAddress != address(0),\r\n            \"Auditor does not exist\"\r\n        );\r\n        auditors[_auditorID].block = false;\r\n        _grantRole(AUDITOR_ROLE, auditors[_auditorID].auditorAddress);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}